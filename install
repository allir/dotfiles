#!/usr/bin/env bash
set -euo pipefail

# This is pretty ugly, but it works on macOS without requiring coreutils for GNU readlink
# Ideally this would be:
# SCRIPT=$( readlink -f ${BASH_SOURCE[0]} )
SCRIPT=$( cd "$( dirname "${BASH_SOURCE[0]}" )" &>/dev/null && pwd )/$( basename "${BASH_SOURCE[0]}" )
SCRIPTPATH=$( dirname "${SCRIPT}" )

# Ask for the administrator password upfront
sudo -v
# Keep-alive: update existing `sudo` time stamp until finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

case $(uname -s) in
    "Darwin" )
        echo "Starting Installation (Darwin)..."
        # Install xcode command line tools
        echo "Setting up xcode command line tools"
        check="$(xcode-select --install 2>&1)" || true
        str="xcode-select: note: install requested for command line developer tools"
        if [[ "$check" == "$str" ]]; then
          echo "Waiting for xcode command line tools installation to finish..."
        fi
        while [[ "$check" == "$str" ]]; do
          check="$(xcode-select --install 2>&1)" || true
          sleep 1
        done

        # Ensure latest version of .dotfiles repo
        echo "Updating dotfiles repository..."
        pushd "${SCRIPTPATH}"
        git pull
        popd

        # Setup sudoers for user
        echo "Add user to passwordless sudoers"
        "${SCRIPTPATH}/libexec/setup_sudoers.sh"

        # Install Homebrew
        echo "Setting up Homebrew"
        "${SCRIPTPATH}/libexec/setup_homebrew.sh"
        eval "$(/opt/homebrew/bin/brew shellenv 2>/dev/null)"
    
        # Install  Formulae & Casks
        echo "Installing Formulae and Casks from Brewfile bundle"
        brew bundle --file="${SCRIPTPATH}/Brewfile" || true

        # Add homebrew bash and zsh to /etc/shells and change shell
        if ! ( grep "${HOMEBREW_PREFIX}/bin/bash" /etc/shells &>/dev/null ); then
            echo "Adding bash to /etc/shells"
            echo "${HOMEBREW_PREFIX}/bin/bash" | sudo tee -a /etc/shells > /dev/null
        fi
        if ! ( grep "${HOMEBREW_PREFIX}/bin/zsh" /etc/shells &>/dev/null ); then
            echo "Adding zsh to /etc/shells"
            echo "${HOMEBREW_PREFIX}/bin/zsh" | sudo tee -a /etc/shells > /dev/null
            sudo chmod -R 755 "${HOMEBREW_PREFIX}/share/zsh" &>/dev/null
        fi
        sudo chsh -s "${HOMEBREW_PREFIX}/bin/zsh" "$(whoami)"

        # Link dotfiles
        echo "Setting up symlinks"
        "${SCRIPTPATH}/libexec/setup_symlinks.sh"

        echo "Setting up SSH config"
        "${SCRIPTPATH}/libexec/setup_ssh.sh"

        # Configure iTerm2
        echo "Configuring iTerm2"
        "${SCRIPTPATH}/libexec/setup_iterm.sh"

        # Configure Dock
        echo "Configuring macOS Dock"
        "${SCRIPTPATH}/libexec/macos/configure_dock.sh"
        ;;

    "Linux" )
        echo "Starting Installation (Linux)..."
        # Setup sudoers for user
        echo "Add user to passwordless sudoers"
        "${SCRIPTPATH}/libexec/setup_sudoers.sh"

        # Link dotfiles
        echo "Setting up symlinks"
        "${SCRIPTPATH}/libexec/setup_symlinks.sh"

        echo "Setting up SSH config"
        "${SCRIPTPATH}/libexec/setup_ssh.sh"
        ;;
esac

# Create user bin folder and link scripts
mkdir -p "${HOME}/bin"
for f in "${SCRIPTPATH}/bin/"*; do
    ln -sf "$f" "${HOME}/bin/"
done

if [[ $(uname -s) == "Darwin" ]]; then
    # Configure macOS Terminal
    # Note that this will kill the Terminal to save changes
    echo "Configuring macOS Terminal"
    "${SCRIPTPATH}/libexec/macos/configure_terminal.sh"
fi
