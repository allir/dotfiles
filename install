#!/usr/bin/env bash
set -euo pipefail

# This is pretty ugly, but it works on macOS without requiring coreutils for GNU readlink
# Ideally this would be:
# SCRIPT=$( readlink -f ${BASH_SOURCE[0]} )
SCRIPT=$( cd "$(dirname ${BASH_SOURCE[0]})" &>/dev/null && pwd )/$( basename ${BASH_SOURCE[0]} )
SCRIPTPATH=$( dirname ${SCRIPT} )

# Ask for the administrator password upfront
sudo -v
# Keep-alive: update existing `sudo` time stamp until finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Install xcode command line tools
echo -e "Setting up xcode command line tools"
check="$(xcode-select --install 2>&1)" || true
str="xcode-select: note: install requested for command line developer tools"
if [[ "$check" == "$str" ]]; then
  echo -e "Waiting for xcode command line tools installation to finish..."
fi
while [[ "$check" == "$str" ]]; do
  check="$(xcode-\select --install 2>&1)" || true
  sleep 1
done

# Install Homebrew, Formulae & Casks
echo -e "Setting up Homebrew + Brewfile bundle..."
${SCRIPTPATH}/homebrew-setup.sh
if ! ( grep "/usr/local/bin/bash" /etc/shells &>/dev/null ); then
  echo "Adding bash to /etc/shells"
  echo "/usr/local/bin/bash" | sudo tee -a /etc/shells > /dev/null
fi
if ! ( grep "/usr/local/bin/zsh" /etc/shells &>/dev/null ); then
  echo "Adding zsh to /etc/shells"
  echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells > /dev/null
fi
# chsh prompts for password?
#chsh -s /usr/local/bin/bash

# Link dotfiles
echo -e "Setting up symlinks"
${SCRIPTPATH}/symlink-setup.sh

# Configure iTerm2
echo -e "Configuring iTerm2"
${SCRIPTPATH}/.iterm/iterm-setup.sh

echo -e "\n\nNote that the default shell has not been updated. Run \"chsh -s /path/to/shell\" to change it."
echo -e "For example: \"chsh -s /usr/local/bin/bash\" or \"chsh -s /usr/local/bin/zsh\""
