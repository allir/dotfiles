# Functions

# History
## Prunes all duplicates from history
history-prune(){
    tac "$HISTFILE" | awk '!x[$0]++' > /tmp/history && tac /tmp/history > "$HISTFILE" && rm /tmp/history
}
## History stats
history-top(){
    history | awk '{print $2;}' | sort | uniq -c | sort -rn | head -10
}
history-tops(){
    history | sed -e 's/ *[0-9][0-9]* *//' | sort | uniq -c | sort -rn | head -10
}

# AWS Profile Selection
awspro() {
    function show_help() {
        local prog="awspro"
        printf "AWSPro Usage:\n" >&2
        printf "\t%s\t\t\t\t\t%s\n"  "$prog" "Promt for profile selection" >&2
        printf "\t%s\t\t%s\n"  "$prog --profile=[profile]" "Select given profile" >&2
        printf "\t%s\t\t\t\t%s\n"  "$prog --login" "Perform AWS SSO Login for selected profile" >&2
    }

    local profile=""
    local error_profile="ERROR: '--profile' requires a non-empty option argument."
    local login="false"
    local verbose=0

    # Handle arguments
    while true; do
    case $1 in
        -p|--profile)       # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                profile=$2
                shift
            else
                printf "%s\n" "$error_profile"
            fi
            ;;
        --profile=?*)
            profile=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --profile=)         # Handle the case of an empty --file=
            printf "%s\n" "$error_profile"
            ;;
        -l|--login)
            login="true"
            ;;
        -h|-\?|--help)
            show_help    # Display a usage synopsis.
            return
            ;;
        -v|--verbose)
            verbose=$((verbose + 1))  # Each -v adds 1 to verbosity.
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac
        shift
    done

    if [[ -n "$profile" ]]; then
        profile=$(sed -n "s/\[profile \(.*\)\]/\1/gp" ~/.aws/config | grep -i "$profile")
        if [[ -n $profile ]]; then
            export AWS_PROFILE=$profile
        else
            printf "%s\n" "Profile $1 not found"
            return
        fi
    else
        if command -v fzf &>/dev/null; then
            profile=$(sed -n "s/\[profile \(.*\)\]/\1/gp" ~/.aws/config | fzf)
        else
            select p in $(sed -n "s@\[profile \(.*\)\]@\1@gp" ~/.aws/config); do
                profile="$p"
            done
        fi

        export AWS_PROFILE=$profile
    fi

    if [[ "$login" == "true" ]]; then
        if command -v aws &>/dev/null; then
            if aws sts get-caller-identity &>/dev/null; then
                printf "%s\n" "Already logged in"
            else
                aws sso login
            fi
        else
            printf "%s\n" "AWS CLI not installed"
        fi
    fi
}

# Mount output for macOS
if [[ $(uname -s) == "Darwin" ]]; then
    mnt() {
        mount | awk -F' ' '{ printf "%s\t%s\n",$1,$3; }' | column -t | grep -E ^/dev/ | sort
    }
fi
